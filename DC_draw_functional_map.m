function DC_draw_functional_map(Rcorr,Pcorr,center_data,p_corr,img_width,img_height,line_weight)
%This function creates a map of functional connectivity.
%
%Location of a circle indicates its position in space
%
%------INPUTS-----------
%All inputs can be generated by DC_corr_distance
%
%Rcorr is the matrix of correlations generated by corrcoef
%
%Pcorr is the matrix of probabilities of random correlations generated by corrcoef
%
%center_data are your coordinates for the center of your ROI, with each column being a seperate ROI
%
%p_corr is a threshold for p value you set to check if a number of pairs is significantly correlated.
%
%dist_calc is a matrix of distances between centers of all ROIs
%
%img_width is the width of the image in pixels. If height and width are not set, will be automatically assigned.
%
%img_height is the height of the image in pixels. If height and width are not set, will be automatically assigned.
%
%



circle_max=sqrt(img_width*img_height)*0.1; %maximum width of a circle on the graph % #hardcode
circle_min=circle_max*0.1; % #hardcode
circle_step=circle_max-circle_min;

%calculate connections
connection=zeros(size(Rcorr)); %makes 0 matrix equal to Rcorr size
parfor roi=1:size(center_data,2) %Draw each ROI
    for i=1:size(Pcorr,1)
        if Pcorr(i,roi)<p_corr %checks if connected.
            connection(i,roi)=1;
        else
            connection(i,roi)=NaN;
        end
    end            
end

Rconnect=Rcorr.*connection; %sets nonsignificant correlations to NaN

Rmean=nanmean(abs(Rconnect),1); %calculates mean magnitude of probable connections

%calculate line widths
line_width=line_weight*(abs(Rconnect));

%calculate widths of circles. Wider = more connected.
circle_width=zeros(1,size(connection,2));
for roi=1:size(connection,2)    
    if isnan(nansum(connection(:,roi)))==1
        circle_width(roi)=circle_min;
    else
        circle_width(roi)=(nansum(connection(:,roi))/(size(connection,2)-1)*circle_step+circle_min);
    end
end

%calculate colors of circles. Redder = more correlated. Blue = no correlation.
circle_color=zeros(3,size(Rmean,2));
color_scale=.125; %half the max correlation #hardcode
%color_scale=max(Rmean)/2; % #hardcode
parfor roi=1:size(Rmean,2);
    if Rmean(roi)==color_scale
        circle_color(:,roi)=[1 0 1];
    else
        if Rmean(roi)<color_scale
            circle_color(:,roi)=[Rmean(roi)/(2*color_scale) 0 1];
        else
            if Rmean(roi)>color_scale
                circle_color(:,roi)=[1 0 1-(Rmean(roi)/(2*color_scale))];
            else
                if isnan(Rmean(roi))==1
                    circle_color(:,roi)=[0 0 1];
                end
            end
        end
    end
end

% Create figure
figure1 = figure('Units','pixels','position',[0 0 img_width img_height]);

% Create axes
axes('Parent',figure1,'YTickLabel',['',sprintf('\n'),''],'YTick',zeros(1,0),...
    'XTick',zeros(1,0),...
     'Units','pixels',...
     'Position',[0 0 img_width img_height]);
hold on
axis tight


% Create ellipses
for roi=1:size(center_data,2)
    circle_size_x=circle_width(roi)/img_width;
    circle_size_y=circle_width(roi)/img_height;
    circle_x=center_data(1,roi)/img_width-circle_size_x/2;
    circle_y=1-center_data(2,roi)/img_height-circle_size_y/2; %y data must be flipped to match image
    
    annotation(figure1,'ellipse',...    
    [circle_x circle_y circle_size_x circle_size_y],...
    'LineStyle','none',...
    'FaceColor',circle_color(:,roi));
end

% Create lines
for i=1:size(Rconnect,1)-1
    for j=i+1:size(Rconnect,2)
        if isnan(Rconnect(i,j))==0
        annotation(figure1,'line',[center_data(1,i)/img_width center_data(1,j)/img_width],...
        [1-center_data(2,i)/img_height 1-center_data(2,j)/img_height],'LineWidth',line_width(i,j));
        end
    end
end


hold off


% Create figure
figure1 = figure('Units','pixels','position',[0 0 img_width img_height]);

% Create axes
axes('Parent',figure1,'YTickLabel',['',sprintf('\n'),''],'YTick',zeros(1,0),...
    'XTick',zeros(1,0),...
     'Units','pixels',...
     'Color',[0 0 0],...
     'Position',[0 0 img_width img_height]);
hold on
axis tight


% Create ellipses
for roi=1:size(center_data,2)
    circle_size_x=circle_width(roi)/img_width;
    circle_size_y=circle_width(roi)/img_height;
    circle_x=center_data(1,roi)/img_width-circle_size_x/2;
    circle_y=1-center_data(2,roi)/img_height-circle_size_y/2; %y data must be flipped to match image
    
    annotation(figure1,'ellipse',...    
    [circle_x circle_y circle_size_x circle_size_y],...
    'LineStyle','none',...
    'FaceColor',circle_color(:,roi));
end

% Create lines
for i=1:size(Rconnect,1)-1
    for j=i+1:size(Rconnect,2)
        if isnan(Rconnect(i,j))==0
        annotation(figure1,'line',[center_data(1,i)/img_width center_data(1,j)/img_width],...
        [1-center_data(2,i)/img_height 1-center_data(2,j)/img_height],'LineWidth',line_width(i,j),'Color',[1 1 1]);
        end
    end
end





